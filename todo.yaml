apiVersion: backstage.io/v1alpha1
kind: API
metadata:
  name: poc-backstage-api
  description: The todos API
  tags:
    - todo
    - dot-net-core-web-api
  links:
    - url: https://github.com/ahemadpirzada-cloud/Backstage-API-Templates
      title: GitHub Repo
      icon: github
    - url: https://github.com/ahemadpirzada-cloud/Backstage-API-Templates/blob/main/todo.yaml
      title: API Spec
      icon: code
  annotations:
    backstage.io/techdocs-ref: dir:.
spec:
  type: openapi
  lifecycle: experimental
  owner: ahemadpirzada
  definition: |
    openapi: 3.0.1
    info:
      title: WebAPI
      version: '1.0'
    servers:
      - url: http://localhost:3080
    paths:
  "/todos":
    get:
      summary: Get all the tasks
      description: Get all the tasks
      produces:
      - application/json
      parameters: []
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              "$ref": "#/definitions/todosResponse"
        '400':
          description: Invalid status value
          schema:
            "$ref": "#/definitions/InvalidResponse"
    "/todo":
    post:
      summary: Save the task
      description: Save the task
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - in: body
        name: body
        description: task object
        required: true
        schema:
          type: object
          properties:
            task:
              type: object
              "$ref": "#/definitions/Task"
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              "$ref": "#/definitions/todosResponse"
        '400':
          description: Invalid status value
          schema:
            "$ref": "#/definitions/InvalidResponse"
  "/todos/{id}":
    put:
      summary: Update the tasks
      description: Update the tasks
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: task id that needs to be deleted
        required: true
        type: string
      - in: body
        name: body
        description: task object
        required: true
        schema:
          type: object
          properties:
            task:
              type: object
              "$ref": "#/definitions/Task"
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              "$ref": "#/definitions/todosResponse"
        '400':
          description: Invalid status value
          schema:
            "$ref": "#/definitions/InvalidResponse"
  "/todo/{id}":
    delete:
      summary: Delete the task
      description: Delete the task
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: task id that needs to be deleted
        required: true
        type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              "$ref": "#/definitions/todosResponse"
        '400':
          description: Invalid status value
          schema:
            "$ref": "#/definitions/InvalidResponse"
